import com.ing.blockchain.zk.components.SecretOrderGroupGenerator;
import com.ing.blockchain.zk.dto.*;
import com.ing.blockchain.zk.exception.ZeroKnowledgeException;

import java.math.BigInteger;

// sample code for zero knowledge age verification - government/kyc-provider provides a proof (TTPMessage - trusted third party message)

public class ZKRPSample {
    public static SecretOrderGroup generateSecretGroup() {
        return new SecretOrderGroupGenerator(512).generate();
    }

    public static void main(String[] args) {
        BigInteger committmentValue = new BigInteger("19"); // user's age, known only by the user and govt.
        ClosedRange ageRange = Config.getAgeRange();

        print(String.format("Age: %d - %d - User (secret) Age: %d", ageRange.getStart(), ageRange.getEnd(), committmentValue));

        SecretOrderGroup secretGroup = generateSecretGroup(); // random seed, generated by the govt, the govt has it so it should probably be the one that runs Eth.exportSolidity()

        // ran by government, generates the proving kit
        TTPMessage trustedMessage = Govt.createTrustedMessage(committmentValue, secretGroup);
        // NOTE - TODO: this message needs to be signed by the govt so that the verifier can check the authenticity of the proof via EC signature verification (JS impl in https://github.com/appliedblockchain/zkp-integer-threshold)

        if (ageRange.contains(trustedMessage.getX())) {
            print("ageRange includes the commitment value");

            // ran by user, generates the "proof of knowledge"
            BoudotRangeProof ageProof = User.generateRangeProof(trustedMessage, ageRange);

            // the service runs the validation, with the proof (TODO: the service also needs to run verify() on signed message (passed by the user, signed by the KYC/Govt)
            try {
                Service.validateAgeProof(ageProof, trustedMessage, Config.getAgeRange());
            } catch (ZeroKnowledgeException ex) {
                print("ERROR - Validation of Age-Knowledge-Proof FAILED!");
            }

            // EXTRA:
            // code to export commitment to Ethereum so a smart contract can verify the range proof
            byte[] solidity = Eth.exportSolidity(secretGroup, committmentValue);
        } else {
            print("Error! The input age is probably outside the range (ageRange doesn't include the commitment value");
        }
    }

    public static String print(String msg) {
        System.out.println(msg);
        return msg;
    }
}
